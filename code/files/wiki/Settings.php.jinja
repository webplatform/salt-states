<?php

## Managed by Salt Stack, please DO NOT TOUCH, or ALL CHANGES WILL be LOST!
## source {{ source }}

{#
 # Data given by mine.get Salt function, data should look like this:
 #
 # foo = [('project', ['10.10.10.1'])]
 #
 # To get the list, run from any salt minion:
 #
 #    salt-call mine.get 'roles:salt' network.ip_addrs grain
 #
 #}
{%- set salt_master_ip = salt['pillar.get']('infra:hosts_entries:salt') -%}
{%- set log_dest_port = 8420 %}{# ## SecurityGroup port: UDP 8420 @salt demux.py  #}
{%- set reCaptchaKeys = salt['pillar.get']('accounts:recaptcha') %}

## How Wikimedia does it, take a look at:
##   * https://github.com/wikimedia/operations-mediawiki-config/tree/master/wmf-config
##   * https://github.com/wikimedia/operations-puppet/tree/production/modules
##   * https://noc.wikimedia.org/conf/
##   * https://noc.wikimedia.org/conf/highlight.php?file=mc.php
##   * https://noc.wikimedia.org/conf/highlight.php?file=mc-labs.php
##   * https://noc.wikimedia.org/conf/highlight.php?file=session.php
##   * https://noc.wikimedia.org/conf/highlight.php?file=InitialiseSettings.php
##   * https://noc.wikimedia.org/conf/highlight.php?file=CommonSettings.php
##
## Reference pages:
##   * http://www.mediawiki.org/wiki/Manual:Configuration_settings
##   * https://www.mediawiki.org/wiki/Manual:Configuration_settings_(alphabetical)
##

$wgCacheDirectory = dirname($IP)."/cache";
#$wgUploadDirectory = $IP"/images";

## See DefaultSettings.php for details on each of them
## wfFixSessionID() in GlobalFunctions
#$wgCookieExpiration = 180*86400;
#$wgCookieDomain = "";
#$wgCookiePath = "/";
#$wgDisableCookieCheck = false;
#$wgCookiePrefix = false;
#$wgCacheVaryCookies = array();
#$wgSessionName = false;

$wgCookieSecure = true;
$wgCookieHttpOnly = true;
$wgSecureLogin = true;
$wgDBssl = true;

## Find a way to keep session duration in sync with cookie #TODO
## webplatform/ops#135 at https://github.com/webplatform/ops/issues/135
$wgCookieExpiration = 3*3600;

## Upcoming improvements
#$wgResourceLoaderUseESI = true;
$wgIncludeLegacyJavaScript = false;
$wgResourceLoaderExperimentalAsyncLoading = true;

## This is because we need the our local
## http server to serve content non compressed
## to the Varnish/Fastly frontend so they can
## server ESI.  #TODO: ensure ESI works and that
##                     fastly serves w/ gzip
##
$wgDisableOutputCompression = true;

# ref: https://github.com/wikimedia/operations-mediawiki-config/blob/master/wmf-config/CommonSettings.php#L945
#$wgMaxSquidPurgeTitles = 500;
#$wgInvalidateCacheOnLocalSettingsChange = false;
#$wgCacheEpoch = '20130601000000';
#$wgThumbnailEpoch = '20130601000000';

# ref: https://github.com/wikimedia/operations-mediawiki-config/blob/master/wmf-config/CommonSettings.php#L305
#$wgUseGzip = true;
#$wgRCMaxAge = 30 * 86400;


$wgMaxShellMemory = 1024 * 512;
$wgEnableParserLimitReporting = false;

## See https://github.com/wikimedia/operations-puppet/tree/production/modules/varnish/templates
##     https://github.com/wikimedia/operations-puppet/tree/production/templates/varnish
## Frontend cache settings
$wgUseSquid = true;
$wgSquidServers = array("docs.{$siteTopLevelDomain}");  // To send purge
$wgVaryOnXFP = true;
#$wgUsePrivateIPs = true;

## Configured by Salt stack in code/wiki.sls
## Python salt_master_ip variable holds: {{ salt_master_ip }}
$wpdUdp2logDest = '{{ salt_master_ip|default('salt') }}:{{ log_dest_port }}';

## ref: http://www.mediawiki.org/wiki/Manual:$wgDebugLogGroups
$wgDebugLogGroups = array(
   'SpamBlacklist' => "udp://$wpdUdp2logDest/spam",
   'recentchanges' => "udp://$wpdUdp2logDest/recentchanges",
   'warning' => "udp://$wpdUdp2logDest/warning",
   'runJobs' => "udp://$wpdUdp2logDest/runJobs",
   'redis' => "udp://$wpdUdp2logDest/redis",
   'JobQueueRedis' => "udp://$wpdUdp2logDest/JobQueueRedis",
   'memcached' => "udp://$wpdUdp2logDest/memcached",
   'memcached-serious' => "udp://$wpdUdp2logDest/memcached-serious",
   'squid' => "udp://$wpdUdp2logDest/squid",
   'loginSessions' => "udp://$wpdUdp2logDest/loginSession",
   'UserThrottle' => "udp://$wpdUdp2logDest/UserThrottle",
   'cite' => "udp://$wpdUdp2logDest/cite",
   'thumbnail' => "udp://$wpdUdp2logDest/thumbnail",
   'mkdir' => "udp://$wpdUdp2logDest/mkdir",
   'slow-parse' => "udp://$wpdUdp2logDest/slow-parse",
   'exception' => "udp://$wpdUdp2logDest/exception",
   'session' => "udp://$wpdUdp2logDest/session",
   'badblock' => "udp://$wpdUdp2logDest/badblock",
   'SpamRegex' => "udp://$wpdUdp2logDest/spam",
   'ValidationStatistic' => "udp://$wpdUdp2logDest/valid",
   'OutputBuffer' => "udp://$wpdUdp2logDest/buffer",
   'exec' => "udp://$wpdUdp2logDest/exec",
   'lc-recache' => "udp://$wpdUdp2logDest/lc-recache",
   'generated-pp-node-count' => "udp://$wpdUdp2logDest/generated-pp-node-count",
   'api' => "udp://$wpdUdp2logDest/api",
);

###### Production caching settings #####################
## ref: https://github.com/wikimedia/operations-mediawiki-config/blob/master/wmf-config/mc.php


##
## PAGE CACHE
##
## ref: https://github.com/wikimedia/operations-mediawiki-config/blob/master/wmf-config/mc.php
##      http://www.mediawiki.org/wiki/Memcached
##      http://www.mediawiki.org/wiki/Manual:$wgObjectCaches
##
$wgMainCacheType = 'memcached-pecl';
$wgMemCachedPersistent = false;
$wgMemCachedTimeout = 250000; # default is 100000
$wgMemCachedServers = $wpdConfig['alpha_memcache'];
$wgObjectCaches['memcached-pecl'] = array(
    'class' => 'MemcachedPeclBagOStuff',
    'serializer' => 'php',
    'persistent' => false,
    'servers' => $wpdConfig['alpha_memcache'],
    'server_failure_limit' => 1e9,
    'retry_timeout' => -1
);
$wgObjectCaches['redis'] = array(
    'class' => 'RedisBagOStuff',
    'servers' => $wpdConfig['alpha_redis'],
    'persistent' => true,
);
#$wgObjectCaches['memcached-pecl'][0]['serializer'] = 'igbinary'; // pkg igbinary should be installed, or use 'php'. As of 20141125 igbinary dont work, #TODO

##
## SESSIONS
##
## If we want to have cross-datacenter session replication, Redis would
## be a good choice. In the meantime, let’s use the default.
##
#$wgObjectCaches['sessions'] = array(
#        'class'   => 'RedisBagOStuff',
#        'servers' => array( '127.0.0.1:6379' ),
#);
$wgSessionsInObjectCache = true;
$wgSessionCacheType = 'sessions';
$wgObjectCaches['sessions'] = array(
        'class'   => 'RedisBagOStuff',
        'servers' => $wpdConfig['sessions_redis'],
);

##
## JOBS
##
## Is we had a very big amount of jobs (e.g. milions hits a month) it would be good
## to move jobs to Redis.
##
## bd808: You can choose to put jobs into redis or into db tables. The redis job runner has some
##        fanciness that the db version doesn’t, but I doubt it makes much difference either way for your wiki.
##        Most wikis don’t even need a separate job runner and can just piggy back jobs on the tail end of requests (default setup)
##        The WMF cluster adds a lot of operational complexity in order to scale to our millions of hits per hour request rate
##        A "big" wiki would be lucky to get a million hits a month. :)
##
## ref: https://github.com/wikimedia/operations-mediawiki-config/blob/master/wmf-config/CommonSettings.php
##
## $wpdRedisJobServers is defined in salt/code/files/wiki/LocalSettings.php.jinja
##
#$wgJobTypeConf['default'] = array(
#        'class'        => 'JobQueueRedis',
#        'redisServer'  => $wpdRedisJobServers[0],
#        'redisConfig'  => array( 'connectTimeout' => 2, 'compression' => 'gzip' ),
#);
#$wgJobQueueAggregator = array(
#        'class'        => 'JobQueueAggregatorRedis',
#        'redisServers'  => $wpdRedisJobServers,
#        'redisConfig'  => array( 'connectTimeout' => 2 ),
#);


## renoirb 20140404
## http://ryandlane.com/blog/2009/04/21/allowing-docpptxls-uploads-to-mediawiki-and-getting-proper-mime-types-back/
$wgFileExtensions = array( 'png', 'gif', 'jpg', 'jpeg', 'ppt', 'pdf', 'psd', 'mp3', 'mp4', 'xls', 'xlsx', 'swf', 'doc','docx', 'odt', 'odc', 'odp', 'odg', 'mpp', 'svg', 'svgz', 'ai', 'txt');


###################
## Extensions

## ref: https://wikitech.wikimedia.org/wiki/EventLogging
##      http://www.mediawiki.org/wiki/Extension:EventLogging
#require_once("$IP/extensions/EventLogging/EventLogging.php");
#$wgEventLoggingBaseUri = 'http://173.236.254.222:8080/event.gif';
#$wgEventLoggingFile = dirname($IP)."/logs/events.log";
#$wgEventLoggingSchemaApiUri = $wgServer.'/w/api.php';

## Anti bots
## Has a very basic plugin that checks form application/x-www-form-urlencoded.
## #TODO: Code traps ourselves and enable them through here
#require_once("$IP/extensions/AntiBot/AntiBot.php");

## Check user to jail out spammers
require_once("$IP/extensions/CheckUser/CheckUser.php");
$wgGroupPermissions['sysop']['checkuser'] = true;
$wgGroupPermissions['sysop']['checkuser-log'] = true;

## Account Audit, keeps record of last login, needs database update though.
## #TODO Analyze impacts before enabling
#require_once("$IP/extensions/AccountAudit/AccountAudit.php");

#if(is_array($wpdConfig['elastic_nodes_wiki']) && count($wpdConfig['elastic_nodes_wiki']) >= 1) {
#require_once( "$IP/extensions/Elastica/Elastica.php" );
#require_once( "$IP/extensions/CirrusSearch/CirrusSearch.php" );
#$wgDisableSearchUpdate = true;
#$wgSearchType = 'CirrusSearch';
#$wgCirrusSearchServers = $wpdConfig['elastic_nodes_wiki'];
### DO NOT USE YET!
###  - we’ll need a separate elasticsearch cluster :(
###  - and/or enable Dynamic scripting http://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html#_enabling_dynamic_scripting
###  - Put switch in ES for cors, and allow-hosts.
###  - OR... use an ElasticSearch VM only for that.
### Update index?
### - set wgDisableSearchUpdate to false
### - refer to extensions/CirrusSearch/README
#}

require_once("$IP/extensions/Renameuser/Renameuser.php");

## Syntax Highlighting Extension
require_once("$IP/extensions/SyntaxHighlight_GeSHi/SyntaxHighlight_GeSHi.php");
$wgSyntaxHighlightDefaultLang = "html5";

require_once("$IP/extensions/Cite/Cite.php");

require_once("$IP/extensions/WikiEditor/WikiEditor.php");
$wgDefaultUserOptions['usebetatoolbar'] = 1;
$wgDefaultUserOptions['usebetatoolbar-cgd'] = 1;
#require_once("$IP/extensions/Gadgets/Gadgets.php"); #DISABLED

require_once("$IP/extensions/CategoryTree/CategoryTree.php");

include_once("$IP/extensions/Validator/Validator.php");

include_once("$IP/extensions/SemanticMediaWiki/SemanticMediaWiki.php");
enableSemantics('webplatform');

## Semantic Forms Extension
include_once("$IP/extensions/SemanticForms/SemanticForms.php");
$sfgRenameEditTabs = true;

## SemanticResultFormats, an extra set of printers for SMW
require_once("$IP/extensions/SemanticResultFormats/SemanticResultFormats.php");

include_once("$IP/extensions/AdminLinks/AdminLinks.php");
#require_once("$IP/extensions/EmailCapture/EmailCapture.php");  #TODO, find

## Captcha Extension
## SSL, WATCHOUT, extensions/ConfirmEdit/ReCaptcha.class MUST have $useHttps=true;
## sed -i '' -e's/\$useHttps\ \=/\$useHttps=true;\/\//g' extensions/ConfirmEdit/ReCaptcha.class.php
require_once( "$IP/extensions/ConfirmEdit/ConfirmEdit.php" );
require_once( "$IP/extensions/ConfirmEdit/ReCaptcha.php" );
$wgCaptchaTriggers['edit']          = false;
$wgCaptchaTriggers['create']        = false;
$wgCaptchaTriggers['addurl']        = true;
$wgCaptchaTriggers['createaccount'] = true;
$wgCaptchaTriggers['badlogin']      = false;
$wgReCaptchaPublicKey  = '{{ reCaptchaKeys.get('key') }}';
$wgReCaptchaPrivateKey = '{{ reCaptchaKeys.get('secret') }}';
$wgGroupPermissions['autoconfirmed']['skipcaptcha'] = true;
$ceAllowConfirmedEmail = true;
$wgAccountCreationThrottle = 6;

## Emergency mode, ask captcha to all anonymous and new accounts
#$wgCaptchaTriggers['edit']          = true;
#$wgCaptchaTriggers['create']        = true;

## SpamBlacklist
## See also wiki pages that contains the lists themselves:
##  * MediaWiki:Email-blacklist
##  * MediaWiki:Email-whitelist
##  * MediaWiki:Spam-blacklist
##  * MediaWiki:Spam-whitelist
require_once( "$IP/extensions/SpamBlacklist/SpamBlacklist.php" );
$wgBlacklistSettings = array();
$wgBlacklistSettings['spam']['files'][] = "[[MediaWiki:Spam-blacklist]]";
$wgBlacklistSettings['spam']['files'][] = "https://meta.wikimedia.org/w/index.php?title=Spam_blacklist&action=raw&sb_ver=1";

## Page mass-delete
require_once("$IP/extensions/Nuke/Nuke.php");

## Comments extension
#require_once("$IP/extensions/Comments/Comments.php");
#$wgCommentsEnabledNS = array(NS_MAIN);
#require_once("$IP/extensions/WebPlatformDocs/extensions/SectionComments/SectionComments.php"); #TODO, REFACTOR, see WebPlatformDocs/main.php

require_once("$IP/extensions/WebPlatformSearchAutocomplete/WebPlatformSearchAutocomplete.php");

## Sub-page list
require_once("$IP/extensions/SubPageList3/SubPageList3.php");

## DismissableSiteNotice
#require_once("$IP/extensions/DismissableSiteNotice/DismissableSiteNotice.php" ); #DISABLED

## Semantic_Internal_Objects
include_once("$IP/extensions/SemanticInternalObjects/SemanticInternalObjects.php");

## Replace_Text
#require_once("$IP/extensions/ReplaceText/ReplaceText.php"); #TODO, Find?

## StringFunctionsEscaped
require_once("$IP/extensions/ParserFunctions/ParserFunctions.php");
$wgPFEnableStringFunctions = true;  // Note: this must be after ParserFunctions and before StringFunctionsEscaped
require_once("$IP/extensions/StringFunctionsEscaped/StringFunctionsEscaped.php"); #NEEDSTOBEADDED

## Social Profile extension
require_once("$IP/extensions/SocialProfile/SocialProfile.php"); # Make sure we applied mediawiki/patches/issue-19.path
$wgUserProfileDisplay['friends'] = true;
$wgUserProfileDisplay['foes'] = false;
$wgUserProfileDisplay['avatar'] = false;
$wgUserProfileThresholds['edits'] = $wgAutoConfirmCount;
$wgEmailConfirmToEdit = true;

## NewSignupPage extension, for agreeing to site terms
require_once("$IP/extensions/NewSignupPage/NewSignupPage.php"); #NEEDSTOBEADDED
$wgRegisterTrack = true;
$wgUserStatsPointValues['referral_complete'] = 10;
$wgAutoAddFriendOnInvite = true;
$wgForceNewSignupPageInitialization = true;

## CLDR extension, for local language names
require_once("$IP/extensions/cldr/cldr.php");

require_once("$IP/extensions/LookupUser/LookupUser.php");  #NEEDSTOBEADDED
$wgGroupPermissions['*']['lookupuser'] = false;
$wgGroupPermissions['sysop']['lookupuser'] = true;

require_once( "$IP/extensions/UserMerge/UserMerge.php" );
$wgGroupPermissions['bureaucrat']['usermerge'] = true;

require_once( "$IP/extensions/AbuseFilter/AbuseFilter.php" );
$wgGroupPermissions['sysop']['abusefilter-modify'] = true;
$wgGroupPermissions['*']['abusefilter-log-detail'] = true;
$wgGroupPermissions['*']['abusefilter-view'] = true;
$wgGroupPermissions['*']['abusefilter-log'] = true;
$wgGroupPermissions['sysop']['abusefilter-private'] = true;
$wgGroupPermissions['sysop']['abusefilter-modify-restricted'] = true;
$wgGroupPermissions['sysop']['abusefilter-revert'] = true;

require_once("$IP/extensions/WebPlatformMediaWikiExtensionBundle/main.php");

#if( isset( $wgWebPlatformAuth['client']) && !empty($wgWebPlatformAuth['client']['id']) ) {
#  require_once( "$IP/extensions/AccountRelier/WebPlatformAuth.php" );
#}

# vim: set ft=php expandtab:

